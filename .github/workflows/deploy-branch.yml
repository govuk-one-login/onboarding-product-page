name: Deploy demo (branch)
run-name: Deploy demo [${{ github.head_ref || github.ref_name }}]

on:
  merge_group:
    types:
      - checks_requested

concurrency: deploy-demo-${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write
  contents: read

jobs:
  build-dependencies:
    if: startsWith(github.event.head_commit.message, '[DEPLOY]') == true
    name: Build frontend
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-id }}
    steps:
      - name: Pull repository
        id: checkout
        uses: actions/checkout@v4

      - name: Build
        id: build
        uses: ./.github/actions/build
        with:
          artifact-name: frontend-build-demo

  push-image:
    if: startsWith(github.event.head_commit.message, '[DEPLOY]') == true
    name: Push image
    needs: build-dependencies
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.push-image.outputs.image-uri }}
    environment:
      name: demo
      url: ${{ steps.push-image.outputs.image-url }}
    steps:
      - name: Login to GDS Dev Dynatrace Container Registry
        uses: docker/login-action@v3
        with:
          registry: khw46367.live.dynatrace.com
          username: khw46367
          password: ${{ secrets.dynatrace-pass-token }}

      - name: Push Docker image
        uses: govuk-one-login/github-actions/aws/ecr/build-docker-image@7d56b09b4d2a9a9c6005843d28f31a2333ad1373 # 13/03/2024
        id: push-image
        with:
          image-version: ${{ github.sha }}
          aws-role-arn: ${{ vars.DEPLOYMENT_ROLE_ARN }}
          repository: ${{ vars.FRONTEND_CONTAINER_REPOSITORY_NAME }}
          image-tags: "${{ github.head_ref || github.ref_name }}"
          dockerfile: Dockerfile
          artifact-name: frontend-build-demo
          artifact-path: dist

  build-infrastructure:
    if: startsWith(github.event.head_commit.message, '[DEPLOY]') == true
    name: Build infrastructure
    needs: push-image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.push-image.outputs.image-uri }}
    environment:
      name: development
      url: ${{ steps.push-image.outputs.image-url }}
    steps:
      - name: Replace placeholders
        if: ${{ github.actor != 'dependabot[bot]' }}
        id: replace-placeholders
        env:
          TEMPLATE_FILE: ${{ inputs.template }}
          IMAGE_URI: ${{ inputs.image_uri }}
        run: |
          sam build ${TEMPLATE_FILE:+--template $TEMPLATE_FILE}
          echo "template=.aws-sam/build/template.yaml" >> "$GITHUB_OUTPUT"

          if grep -q "CONTAINER-IMAGE-PLACEHOLDER" .aws-sam/build/template.yaml; then
            echo "Replacing \"CONTAINER-IMAGE-PLACEHOLDER\" with new ECR image ref"
            sed -i "s|CONTAINER-IMAGE-PLACEHOLDER|$IMAGE_URI|" .aws-sam/build/template.yaml
          else
            echo "WARNING!!! Image placeholder text \"CONTAINER-IMAGE-PLACEHOLDER\" not found - uploading template anyway"
          fi

      - name: Archive distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          retention-days: 7
          path: .aws-sam/build#

  deploy:
    if: startsWith(github.event.head_commit.message, '[DEPLOY]') == true
    name: Deploy
    runs-on: ubuntu-latest
    outputs:
      stack-name: ${{ steps.deploy.outputs.stack-name }}
      deployment-url: ${{ steps.get-deployment-url.outputs.url }}
    environment:
      name: demo
      url: ${{ steps.get-deployment-url.outputs.url || steps.deploy.outputs.stack-url }}
    steps:
      - name: Get deployment name
        uses: govuk-one-login/github-actions/beautify-branch-name@7d56b09b4d2a9a9c6005843d28f31a2333ad1373 # 13/03/2024
        id: get-deployment-name
        with:
          length-limit: 22
          prefix: preview
          verbose: false

      - name: Deploy stack
        uses: govuk-one-login/github-actions/sam/deploy-stack@7d56b09b4d2a9a9c6005843d28f31a2333ad1373 # 13/03/2024
        id: deploy
        with:
          aws-role-arn: ${{ vars.DEPLOYMENT_ROLE_ARN }}
          sam-deployment-bucket: ${{ vars.DEPLOYMENT_ARTIFACTS_BUCKET }}
          delete-failed-stack: ${{ !inputs.disable-rollback }}
          disable-rollback: ${{ inputs.disable-rollback }}
          stack-name-prefix: preview-${{ inputs.name }}-pp
          artifact-name: ${{ inputs.artifact }}
          template: ${{ inputs.template }}
          s3-prefix: sse-preview
          tags: |-
            sse:component=${{ inputs.name }}
            sse:stack-type=preview-pp
            sse:application=self-service
            sse:deployment-source=github-actions
            sse:lifecycle=temporary
          parameters: |-
            DeploymentName=${{ steps.get-deployment-name.outputs.pretty-branch-name }}
            ${{ inputs.parameters }}

      - name: Get deployment URL
        id: get-deployment-url
        if: ${{ inputs.deployment-url-output != null }}
        env:
          NAME: ${{ inputs.deployment-url-output }}
          OUTPUTS: ${{ steps.deploy.outputs.stack-outputs }}
        run: |
          url=$(jq --raw-output ".$NAME" <<< "$OUTPUTS")
          printf "🌐 Deployment URL\n%s" "$url" >> "$GITHUB_STEP_SUMMARY"
          echo "url=$url" >> "$GITHUB_OUTPUT"
