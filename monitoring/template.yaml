AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: DI product page monitoring

Parameters:
  SlackWebhookParamName:
    Type: String
    Default: slack-webhook-path
  SlackChannelParamName:
    Type: String
    Default: slack-canary-channel
  NotificationEmailAddressParamName:
    Type: String
    Default: canary-notification-email-address
  DIProductPageURL:
    Type: String
    Default: https://www.sign-in.service.gov.uk/

Resources:
  ProductPageCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: di-product-page
      ArtifactS3Location: !Sub s3://${CanaryResultsBucket}
      SuccessRetentionPeriod: 1
      FailureRetentionPeriod: 5
      Code:
        Handler: index.handler
        Script: !Sub |
          const url = '${DIProductPageURL}';
          const synthetics = require('Synthetics');
          const syntheticsConfig = synthetics.getConfiguration();
          syntheticsConfig.setConfig({
            screenshotOnStepStart: false,
            screenshotOnStepSuccess: false,
            screenshotOnStepFailure: true,
            includeRequestHeaders: true, // Enable if headers should be displayed in HAR
            includeResponseHeaders: true, // Enable if headers should be displayed in HAR
            restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
            restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports
          });
          exports.handler = async () => {
            const page = await synthetics.getPage();
            await synthetics.executeStep('Open product pages', async function (timeoutInMillis = 30000) {
              const response = await page.goto(url, { waitUntil: ['load', 'networkidle0'], timeout: timeoutInMillis });
              if (!response || response.status() < 200 || response.status() > 299) {
                throw `Failed to load the page at ${!url} (${!response?.status()})`
              }
            });
          };
      ExecutionRoleArn: !GetAtt CanaryExecutionRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-3.6
      RunConfig:
        TimeoutInSeconds: 60
      Schedule:
        Expression: rate(5 minutes)
      StartCanaryAfterCreation: true

  CanarySnsToSlackFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda function that takes a Canary SNS message and sends it to Slack
      CodeUri: lambda
      Handler: sns-to-slack.canarySnsToSlackHandler
      Runtime: nodejs16.x
      Environment:
        Variables:
          SLACK_CHANNEL: !Sub "{{resolve:ssm:${SlackChannelParamName}}}"
          SLACK_WEBHOOK_PATH: !Sub "{{resolve:ssm:${SlackWebhookParamName}}}"
          PRODUCT_PAGE_URL: !Sub ${DIProductPageURL}
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref ProductPageCanaryDeadLetterQueue
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ProductPageCanaryDeadLetterQueue.TopicName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints: [ sns-to-slack.ts ]

  ProductPageCanaryDeadLetterQueue:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Sub "{{resolve:ssm:${NotificationEmailAddressParamName}}}"

  ProductPageCanarySnsTopic:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DI product page monitoring
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt CanarySnsToSlackFunction.Arn

  CanarySnsToSlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CanarySnsToSlackFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ProductPageCanarySnsTopic

  CanaryResultsBucket:
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    # checkov:skip=CKV_AWS_19: "Ensure the S3 bucket has server-side-encryption enabled"
    # checkov:skip=CKV_AWS_21: "Ensure the S3 bucket has versioning enabled"
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        BlockPublicAcls: true
      LifecycleConfiguration:
        Rules:
          - Id: RemoveOldObjects
            Status: Enabled
            ExpirationInDays: 7

  CanaryLogGroup:
    # checkov:skip=CKV_AWS_158: "Ensure that CloudWatch Log Group is encrypted by KMS"
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  CanaryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CanaryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${CanaryResultsBucket.Arn}/*

              - Effect: Allow
                Action: s3:GetBucketLocation
                Resource: !GetAtt CanaryResultsBucket.Arn

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt CanaryLogGroup.Arn

              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: "*"

              - Effect: Allow
                Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": CloudWatchSynthetics
                Resource: "*"

  ProductPageCanaryAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: ProductPageCanary
    Properties:
      AlarmDescription: "Product page canary: 1 failure in the last 5 minutes"
      AlarmActions: [ !Ref ProductPageCanarySnsTopic ]
      OKActions: [ !Ref ProductPageCanarySnsTopic ]

      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Sum
      Threshold: 1
      Period: 300
      EvaluationPeriods: 1
      TreatMissingData: notBreaching # The metric is only reported when a test fails. So missing data means the tests aren't failing

      MetricName: Failed
      Namespace: CloudWatchSynthetics
      Dimensions:
        - Name: CanaryName
          Value: !Ref ProductPageCanary
